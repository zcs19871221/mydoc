先处理aliasconf配置,然后执行
->compile()
    ->load(moduleFile = "", wrap = body, parentWidget = Widget)
        ->Widget.create(wrap = document.body, parent = rootWidget, defname = "")
            1.创建guid
            2.wrap['ne-wguid'] = widget.guid = guid 标识实例化完毕
            3.widgetCache[guid] = widget; 缓存widget
            4.widget.$root = $$(document.body)
            5.  widget.parent = parent;
                parent.children.push(widget);
            6.widgetCache[文件路径].push(widget);
        widget.isolate
        widget.scope
        ->getPluginPromise(处理插件ne-plugin)然后执行
                [根据ne-module的内容对应不同处理:
                    1).html后缀

                    2)空模块(ne-module值为空或没有该属性)

                    3)其他类型(常用):
                        amdLoader.get(moduleFile).deploy(widget, parentWidget
                            ->amdLoader.makeDefer(name)
                                ->ajax.require]
            ->amdLoader.instantiate(null, widget)
            911项目中是空模块,直接调用
                widget.model
                widget.view
                scope.$widget = widget;
                scope.$root = widget.$root;
                这里依赖def为空,直接触发widget准备好的函数,prepared()
                先处理ne-state然后
                处理'ne-state-extend', 'ne-extend'这里的extend只不过是把{{}}类型的处理,把这个表达式放到监控列表中
            ->widget.render()
                ->widget.wander()
                    处理ne-destroy
                    处理ne-delg (执行函数)
                    搜索包裹dom里是否有script[ne-macro],如果有那么进行处理(宏模板)
                    ->wanderdom(wrap=body, fn1=处理element节点, fn2=处理文本节点)
                        [wanderDom根据wrap是body还是其他判断
                        如果是body,先调用处理元素节点的fn1,处理body后,再body节点下的所有子节点
                        否则对该元素的所有子元素,遍历,根据类型做对应处理]
                            元素节点的处理:
                                首先处理ne-if
                                然后处理属性中的优先处理指令
                                然后处理所有的节点属性,跳过上一步的优先指令和ne-role指令
                                (优先节点就是_directives里除了ne-role的指令)
                                    对每一个属性获得ne-后头的内容判断:
                                        1.是否是不能冒泡的事件
                                        2.对所有click,dbclick,contextmenu,键盘事件,鼠标事件和触摸事件(touch)处理
                                        3.ne-href,selected等事件
                                        等等
                                    最后判断是否存在ne-modules属性,如果存在,返回false,不继续递归处理孙节点,(但是这个ne-module节点自身的属性都处理了,只要ne-module里的值是string)否则返回这个节点,然后递归处理wanderDom(这个节点,也就是把这个节点所有非modules的节点都处理)

                            text节点:调用wanderDom第二个匿名函数
                                获取node.value的值,然后判断是否存在{{}}表达式
                                如果\\{{}}形式的表达式,把\\去掉
                                如果是{{}}形式的表达式,执行
                                    destroys.push(views.add({
                                      node : node,
                                      model : text,
                                      scope : scope
                                    }, true));
                    (wander中)递归处理widget.__roles    
                    (wander中)递归处理eventDelgs绑定事件
                再次处理ne-extend,这次要把非{{}}表达式的extend文件通过amdloader异步获取,放入数组extendPromises
                异步把extendPromises文件请求结束后,
                    把请求获得的对象extend到scope中
                    ->widget.compile(wrap) 用于处理子模块
                        ->compile(wrap, widget, destroys)
                            ->wanderDom(会再次调用wanderDom,只不过这次只遍历element,而且element的处理函数是把所有modules都保存起来,为什么不在第一次遍历的时候都把modules处理了)  

                            ->load(ne-module, wrap, parentWidget)
                            (遍历moduleWraps,对每一个module调用)
                                这里跟body时候调用load的不同点在于,这次是有ne-module的值,要异步ajax取文件,再执行amdLoader.instantiate
                                ->amdLoader.get(moduleFile).deploy(widget, parentWidget)(这个异步取文件的方法见下面)
                                    ->amdLoader.instantiate(def, widget, extendArr)
                                        (这次和上边的区别在于这次有依赖def)
                                        ->然后就执行获取的define里的函数
                                        ->prepared()
                                        ->loadHtml()
                                            如果wrap元素是空的话(innerHTML为空)
                                                ->htmlLoader.load处理请求返回的html
                                                    1)替换html中url中存在的href|module等='@'这种的url
                                                    2)把取到的html放到一个div中,通过dom选择,获得这段html中所有的<style>和<link>标签,把它们放到<head>中,通过把这些标签增加onload方法,并通过类似promise.all的方法,让所有的style和link标签加载完成后,通过then再调用injectHtml(目的为了防止无样式闪烁,如果先把html放上去了,样式后到,还得从新渲染).
                                                        ->injectHtml
                                                            1.首先通过template.replace()替换模板,变量定义在ne-props中
                                                            2.替换script变成append形式让它生效
                                                        ->widget.render()
                                            ->widget.render()这里就和上边一样了,遍历子节点

                    执行完处理完子模块后(不一定真的执行完了,不过没关系),如果没有lazy_promise的话,等父亲widgetready后执行doInit
                        ->doInit
                            执行scope.init,然后widget.refresh roleUpdate
                            然后执行widget._readyDefer.resolve(widget);表明这个组件准备完成



           
[amdLoader.get(moduleFile).deploy(widget, parentWidget);
    ->amdLoader.makeDefer(name)
        ->ajax.require
            通过jsonp方式(script.src= "")异步获得文件,完成后执行文件,
            执行define的时候,把define的function push进一个变量defineQueue
            -> succes后执行 amdLoader.postDefine(name, null, notDefine);
                取出define时候push进去的def对象,判断,如果fn是文本,保存进
                 exports["text!"+file] = def.fn;
                 如果是对象,保存进exports[file] = def.fn; 触发resolve,执行后续.
                然后处理依赖关系,执行:
                require(依赖).then() promise后触发defer.resolve(def);
                ->requrie方法
                    会对每一个依赖进行判断,如果是css直接创建link标签,设置src属性处理.
                    否则就把每一个依赖调用depPromise,调用makedefer弄成一个promise
                    return $q.all(promises).then(就是让每个依赖都异步的获取文件.都处理完毕后的then方法就是通过文件名把保存在amdLoader中的对象取出来,返回下一个then就会把这个依赖数组放到depInject中
                    ->depPromise 对每一个依赖再次调用makedefer
                ->amdLoader.getExport:当前的依赖都加载完成后,这些依赖的构造函数都执行:创建一个继承observableObj(就是自带on,emit等处理方法的对象)的对象,使用该对象作为上下文执行构造函数,同时把这个的依赖作为参数执行. 
        amdLoader.get(moduleFile).deploy(widget, parentWidget)
            异步获得核心文件,处理依赖     
                每一个依赖再次makeDefer       
                每一个依赖再次makeDefer  
                每一个依赖再次makeDefer
            当所有依赖处理完毕,调用deploy方法:只有最顶层调用deploy,因为顶层的defer(也就是定义在load方法中的defer)才在最后then了一个执行deploy的方法.
            而其他的底层的makeder在执行完毕后调用的resolve只不过是让父亲defer继续走(比如一个递归的依赖处理完毕后调用resolve,调用all里的then判断是否all执行完毕了没有)
            最终define出的数据结构保存在
            amdLoader._fns = {
                "文件名": {
                    _deps: "依赖的文件名数组",
                    depInject: "依赖的文件执行后返回的对象数组",
                    fn: "函数对象"
                }
            }]  


如何实现单向绑定,通过views对象的item,增加一个监控列表,刷新时候,对每一个表达式和上一个值比对,变了就变dom

双向绑定基于change事件,改变了后,从节点读数据,改变scope的值


                    



