1.stream相关

无论读或写流，都是通过内部函数_read或_write读或者写到一个缓冲区（buffer里），缓冲区的大小是highWaterMark参数控制。然后我们会从这个缓冲区里再读或者写到目标里。

pipe的实际作用：
我们从读缓冲区读出来，放到写缓冲区。如果写入速度慢，那么写缓冲区就会满，.write方法会返回false。然后我们就让读流暂停readstream.pause()，让写缓冲区释放。当写缓冲区释放到一定程度，会触发drain事件，在这个事件里再次让读流继续读radstream.resume()。达到控制的作用。
pipe实际上帮我们平衡了读写，作用是减缓了内存的消耗，但是来回暂停的话实际是会拖慢速度的。